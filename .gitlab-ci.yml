image: docker:stable


# Define the sequence of stages for job execution
stages:
  - compile
  - verify
  - release
  - launch

# Backend Compilation
compile-backend:
  stage: compile
  tags:
    - Neighbourly-runner
  image: maven:latest
  script:
    - cd Backend
    - pwd
    - ls
    - mvn clean package
  artifacts:
    paths:
      - Backend/target/*.jar

# Frontend Compilation
compile-frontend:
  stage: compile
  tags:
    - Neighbourly-runner
  image: node:18-alpine
  script:
    - cd Frontend
    - pwd
    - ls
    - npm install
    - echo $BASE_URL
    - export BACKEND_BASE_URL=$BASE_URL
    - echo $BACKEND_BASE_URL
    - npm run build
  artifacts:
    paths:
      - Frontend/build

# Backend Docker Image Release
release-backend:
  image: docker:stable
  stage: release
  tags:
    - Neighbourly-runner
  variables:
    DOCKER_TLS_CERTDIR: ""
  services:
   - name: docker:24.0-dind
     alias: docker
  before_script:
   - sleep 30  # Adjust the duration as needed
   - docker info  # Verify Docker is accessible
  script:
    - nslookup docker || echo "DNS lookup failed"
    - cd Backend
    - pwd
    - ls
    - echo $SERVER_IP
    - docker --version
    - echo $DOCKER_HUB_PWD | docker login --username $DOCKER_HUB_USER --password-stdin docker.io
    - IMAGE_TAG="$CI_COMMIT_REF_SLUG-$CI_COMMIT_SHORT_SHA"
    - docker build -t $DOCKER_HUB_USER/backend-api:$IMAGE_TAG . -f Dockerfile
    - docker push $DOCKER_HUB_USER/backend-api:$IMAGE_TAG
    - echo "Docker image pushed successfully!"
  only:
    - cicd_fix
    - dev
    - main


# Frontend Docker Image Release
# check
release-frontend:
  image: docker:stable
  stage: release
  tags:
    - Neighbourly-runner
  variables:
    DOCKER_TLS_CERTDIR: ""
  services:
    - name: docker:24.0-dind
      alias: docker
  before_script:
    - sleep 30  # Adjust the duration as needed
    - docker info  # Verify Docker is accessible
  script:
    - nslookup docker || echo "DNS lookup failed"
    - cd Frontend
    - pwd
    - ls
    - echo $SERVER_IP
    - docker --version
    - echo $DOCKER_HUB_PWD | docker login --username $DOCKER_HUB_USER --password-stdin docker.io
    - IMAGE_TAG="$CI_COMMIT_REF_SLUG-$CI_COMMIT_SHORT_SHA"
    - docker build --build-arg BACKEND_BASE_URL=$BASE_URL -t $DOCKER_HUB_USER/frontend:$IMAGE_TAG . -f Dockerfile
    - docker push $DOCKER_HUB_USER/frontend:$IMAGE_TAG
    - echo "Frontend Docker image pushed successfully!"
  only:
    - cicd_fix
    - dev
    - main


# Backend Deployment
launch-backend:
  image: alpine:latest
  stage: launch
  tags:
    - Neighbourly-runner
  before_script:
    - apk update && apk add openssh-client
    - eval $(ssh-agent -s)
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - echo "$ID_RSA" | base64 -d > ~/.ssh/id_ed25519
    - chmod 600 ~/.ssh/id_ed25519
    - ssh-add ~/.ssh/id_ed25519
  script:
    - IMAGE_TAG="$CI_COMMIT_REF_SLUG-$CI_COMMIT_SHORT_SHA"
    - case "$CI_COMMIT_REF_NAME" in
        dev)
          CONTAINER_NAME="neighbourly-dev-app"
          SERVER_PORT=8080
          DB_URL=$DEVINT_DB_URL
          DB_USER=$DEVINT_DB_USER
          DB_PASSWORD=$DEVINT_DB_PASSWORD
          ;;
        main)
          CONTAINER_NAME="neighbourly-prod-app"
          SERVER_PORT=8073
          DB_URL=$PROD_DB_URL
          DB_USER=$PROD_DB_USER
          DB_PASSWORD=$PROD_DB_PASSWORD
          ;;
        *)
          CONTAINER_NAME="neighbourly-test-app"
          SERVER_PORT=8000
          DB_URL=$TEST_DB_URL
          DB_USER=$TEST_DB_USER
          DB_PASSWORD=$TEST_DB_PASSWORD
          ;;
      esac
    - ssh -i ~/.ssh/id_ed25519 -o StrictHostKeyChecking=no $SERVER_USER@$SERVER_IP "docker login -u $DOCKER_HUB_USER -p $DOCKER_HUB_PWD docker.io"
    - ssh -i ~/.ssh/id_ed25519 -o StrictHostKeyChecking=no $SERVER_USER@$SERVER_IP "docker pull $DOCKER_HUB_USER/backend-api:$IMAGE_TAG"
    - ssh -i ~/.ssh/id_ed25519 -o StrictHostKeyChecking=no $SERVER_USER@$SERVER_IP "docker stop $CONTAINER_NAME || true && docker container rm -f $CONTAINER_NAME || true"
    - ssh -i ~/.ssh/id_ed25519 -o StrictHostKeyChecking=no $SERVER_USER@$SERVER_IP "docker run -d -p $SERVER_PORT:$SERVER_PORT --name $CONTAINER_NAME --restart=always -e SERVER_PORT=$SERVER_PORT -e SPRING_DATASOURCE_URL=$DB_URL -e SPRING_DATASOURCE_USERNAME=$DB_USER -e SPRING_DATASOURCE_PASSWORD=$DB_PASSWORD -e EMAIL_HOST=$EMAIL_HOST -e EMAIL_PORT=$EMAIL_PORT -e EMAIL_USERNAME=$EMAIL_USERNAME -e EMAIL_PASSWORD=$EMAIL_PASSWORD -e FRONTEND_HOST=$FRONTEND_HOST -e FRONTEND_LOGIN_URL=$FRONTEND_LOGIN_URL -e FRONTEND_UPDATE_PASSWORD_URL=$FRONTEND_UPDATE_PASSWORD_URL $DOCKER_HUB_USER/backend-api:$IMAGE_TAG"
  environment:
    name: development
    url: http://$SERVER_IP:$SERVER_PORT
  only:
    - cicd_fix
    - dev
    - main

# Frontend Deployment
launch-frontend:
  image: alpine:latest
  stage: launch
  tags:
    - Neighbourly-runner
  before_script:
    - apk update && apk add openssh-client
    - eval $(ssh-agent -s)
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - echo "$ID_RSA" | base64 -d > ~/.ssh/id_ed25519
    - chmod 600 ~/.ssh/id_ed25519
    - ssh-add ~/.ssh/id_ed25519
  script:
    - IMAGE_TAG="$CI_COMMIT_REF_SLUG-$CI_COMMIT_SHORT_SHA"
    - case "$CI_COMMIT_REF_NAME" in
        dev)
          CONTAINER_NAME="neighbourly-dev-app-frontend"
          SERVER_PORT=3000
          REACT_APP_API_BASE_URL=$DEV_BACKEND_BASE_URL
          ;;
        main)
          CONTAINER_NAME="neighbourly-prod-app-frontend"
          SERVER_PORT=3080
          REACT_APP_API_BASE_URL=$PROD_BACKEND_BASE_URL
          ;;
        *)
          CONTAINER_NAME="neighbourly-test-app-frontend"
          SERVER_PORT=3030
          REACT_APP_API_BASE_URL=$TEST_BACKEND_BASE_URL
          ;;
      esac
    - ssh -i ~/.ssh/id_ed25519 -o StrictHostKeyChecking=no $SERVER_USER@$SERVER_IP "docker login -u $DOCKER_HUB_USER -p $DOCKER_HUB_PWD docker.io"
    - ssh -i ~/.ssh/id_ed25519 -o StrictHostKeyChecking=no $SERVER_USER@$SERVER_IP "docker pull $DOCKER_HUB_USER/frontend:$IMAGE_TAG"
    - ssh -i ~/.ssh/id_ed25519 -o StrictHostKeyChecking=no $SERVER_USER@$SERVER_IP "docker container rm -f $CONTAINER_NAME || true"
    - ssh -i ~/.ssh/id_ed25519 -o StrictHostKeyChecking=no $SERVER_USER@$SERVER_IP "docker run -d -p $SERVER_PORT:$SERVER_PORT -e PORT=$SERVER_PORT -e REACT_APP_API_BASE_URL=$REACT_APP_API_BASE_URL --name $CONTAINER_NAME --restart=always $DOCKER_HUB_USER/frontend:$IMAGE_TAG"
  environment:
    name: development
    url: http://$SERVER_IP:$SERVER_PORT
  only:
    - cicd_fix
    - dev
    - main